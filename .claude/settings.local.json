{
  "permissions": {
    "allow": [
      "Bash(source:*)",
      "Bash(git:*)",
      "Bash(npm:*)",
      "Bash(npx:*)",
      "Bash(yarn:*)",
      "Bash(pnpm:*)",
      "Bash(bun:*)",
      "Bash(pip:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(node:*)",
      "Bash(deno:*)",
      "Bash(cargo:*)",
      "Bash(rustc:*)",
      "Bash(go:*)",
      "Bash(mvn:*)",
      "Bash(gradle:*)",
      "Bash(make:*)",
      "Bash(cmake:*)",
      "Bash(jest:*)",
      "Bash(vitest:*)",
      "Bash(pytest:*)",
      "Bash(mocha:*)",
      "Bash(jasmine:*)",
      "Bash(cypress:*)",
      "Bash(playwright:*)",
      "Bash(eslint:*)",
      "Bash(prettier:*)",
      "Bash(black:*)",
      "Bash(flake8:*)",
      "Bash(mypy:*)",
      "Bash(tsc:*)",
      "Bash(rustfmt:*)",
      "Bash(gofmt:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(which:*)",
      "Bash(where:*)",
      "Bash(pwd:*)",
      "Bash(echo:*)",
      "Bash(printf:*)",
      "Bash(wc:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(cut:*)",
      "Bash(tr:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(chmod:*)",
      "Bash(chown:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(kubectl:*)",
      "Bash(helm:*)",
      "Bash(nvm:*)",
      "Bash(rbenv:*)",
      "Bash(pyenv:*)",
      "Bash(rustup:*)",
      "Bash(gh:*)",
      "Bash(hub:*)",
      "Bash(glab:*)",
      "Bash(heroku:*)",
      "Bash(vercel:*)",
      "Bash(netlify:*)",
      "Bash(ps:*)",
      "Bash(top:*)",
      "Bash(htop:*)",
      "Bash(df:*)",
      "Bash(du:*)",
      "Bash(free:*)",
      "Bash(uname:*)",
      "Bash(whoami:*)",
      "Bash(id:*)",
      "Bash(date:*)",
      "Bash(uptime:*)",
      "Bash(hg:*)",
      "Bash(svn:*)",
      "Bash(sqlite3:*)",
      "Bash(psql:*)",
      "Bash(mysql:*)",
      "Bash(redis-cli:*)",
      "Bash(mongo:*)",
      "Read",
      "Edit",
      "Create",
      "Write",
      "Delete",
      "Grep",
      "Glob",
      "LS",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.*)",
      "WebFetch(domain:api.*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:developer.mozilla.org)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(UV_HTTP_TIMEOUT=300 uv add google-genai mcp)",
      "Bash(/home/paul/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"def create_user|async def create_user\" /mnt/c/dev/repos/Repo-MetaswitchExporter/src/netsapiens_api_client.py)",
      "Bash(PYTHONPATH=\"\" python3 src/TESTS/test_fixed_mlhg_member_extraction.py)",
      "Bash(PYTHONPATH=/mnt/c/dev/repos/Repo-MetaswitchExporter uv run python -c \"from src.realistic_sip_provisioning_extractor import RealisticSIPProvisioningExtractor; print('Import successful')\")",
      "Bash(PYTHONPATH=/mnt/c/dev/repos/Repo-MetaswitchExporter/src uv run python src/TESTS/test_realistic_sip_extractor.py)",
      "Bash(-p 3001:3000 )",
      "Bash(-v /var/run/docker.sock:/var/run/docker.sock )",
      "Bash(apt install:*)",
      "Bash(apt:*)",
      "Bash(awk:*)",
      "Bash(black:*)",
      "Bash(bun:*)",
      "Bash(cargo:*)",
      "Bash(cat:*)",
      "Bash(chmod:*)",
      "Bash(chown:*)",
      "Bash(cmake:*)",
      "Bash(cp:*)",
      "Bash(curl:*)",
      "Bash(cut:*)",
      "Bash(cypress:*)",
      "Bash(date:*)",
      "Bash(deno:*)",
      "Bash(df:*)",
      "Bash(docker run -d --name mcp-docker-manager )",
      "Bash(docker run:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(du:*)",
      "Bash(echo:*)",
      "Bash(eslint:*)",
      "Bash(find:*)",
      "Bash(flake8:*)",
      "Bash(free:*)",
      "Bash(gh issue close:*)",
      "Bash(gh issue comment:*)",
      "Bash(gh issue create:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(gh:*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git clone:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git:*)",
      "Bash(glab:*)",
      "Bash(go:*)",
      "Bash(gofmt:*)",
      "Bash(gradle:*)",
      "Bash(grep:*)",
      "Bash(head:*)",
      "Bash(helm:*)",
      "Bash(heroku:*)",
      "Bash(hg:*)",
      "Bash(htop:*)",
      "Bash(hub:*)",
      "Bash(id:*)",
      "Bash(ip route:*)",
      "Bash(jasmine:*)",
      "Bash(jest:*)",
      "Bash(jq:*)",
      "Bash(kubectl:*)",
      "Bash(ls:*)",
      "Bash(make:*)",
      "Bash(mcp/docker:0.0.17)",
      "Bash(mkdir:*)",
      "Bash(mocha:*)",
      "Bash(mongo:*)",
      "Bash(mv:*)",
      "Bash(mvn:*)",
      "Bash(mypy:*)",
      "Bash(mysql:*)",
      "Bash(nc:*)",
      "Bash(netlify:*)",
      "Bash(node:*)",
      "Bash(npm install:*)",
      "Bash(npm:*)",
      "Bash(npx:*)",
      "Bash(pkill:*)",
      "Bash(pip install:*)",
      "Bash(pip:*)",
      "Bash(pip3 install:*)",
      "Bash(playwright:*)",
      "Bash(pnpm:*)",
      "Bash(prettier:*)",
      "Bash(printf:*)",
      "Bash(ps:*)",
      "Bash(psql:*)",
      "Bash(pwd:*)",
      "Bash(pyenv:*)",
      "Bash(pytest:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(rbenv:*)",
      "Bash(redis-cli:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(rustc:*)",
      "Bash(rustfmt:*)",
      "Bash(rustup:*)",
      "Bash(sed:*)",
      "Bash(sort:*)",
      "Bash(source:*)",
      "Bash(sqlite3:*)",
      "Bash(sudo apt autoremove:*)",
      "Bash(sudo apt:*)",
      "Bash(svn:*)",
      "Bash(tail:*)",
      "Bash(telnet:*)",
      "Bash(timeout 120 python3 debug_eas_responses.py)",
      "Bash(timeout 120 uv run:*)",
      "Bash(timeout 300 python query_all_business_groups_devices_fixed.py)",
      "Bash(timeout 60 python3:*)",
      "Bash(timeout 60 uv run:*)",
      "Bash(timeout 90 uv run:*)",
      "Bash(timeout:*)",
      "Bash(top:*)",
      "Bash(touch:*)",
      "Bash(tr:*)",
      "Bash(true)",
      "Bash(tsc:*)",
      "Bash(uname:*)",
      "Bash(uniq:*)",
      "Bash(unzip:*)",
      "Bash(uptime:*)",
      "Bash(uv add:*)",
      "Bash(uv init:*)",
      "Bash(uv pip install:*)",
      "Bash(uv pip list:*)",
      "Bash(uv run:*)",
      "Bash(uv sync:*)",
      "Bash(uv venv:*)",
      "Bash(uv:*)",
      "Bash(venv/bin/pip install psycopg2-binary)",
      "Bash(venv/bin/pip install:*)",
      "Bash(venv/bin/python:*)",
      "Bash(vercel:*)",
      "Bash(vitest:*)",
      "Bash(wc:*)",
      "Bash(where:*)",
      "Bash(which:*)",
      "Bash(whoami:*)",
      "Bash(yarn:*)",
      "Create",
      "Delete",
      "Edit",
      "Glob",
      "Grep",
      "LS",
      "Read",
      "WebFetch(domain:)",
      "WebFetch(domain:api.*)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:docs.ns-api.com)",
      "WebFetch(domain:docs.*)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:www.reddit.com)",
      "Write",
      "gemini:*",
      "mcp__gemini__codereview",
      "mcp__gemini__thinkdeep",
      "mcp__gemini__analyze",
      "mcp__gemini__chat",
      "mcp__gemini__codereview",
      "mcp__gemini__chat",
      "mcp__gemini__debug",
      "Bash(PYTHONPATH=/mnt/c/dev/repos/Repo-MetaswitchExporter/src python src/TESTS/debug_sip_service_indications.py)",
      "Bash(LOG_LEVEL=DEBUG uv run python test_dynamic_device_model_translation.py 2 >& 1)",
      "Bash(env)",
      "Bash(PYTHONPATH=/mnt/c/dev/repos/Repo-MetaswitchExporter uv run python -c \"\nimport sys\nsys.path.insert(0, '/mnt/c/dev/repos/Repo-MetaswitchExporter')\nfrom tests.integration.test_full_commportal_pipeline import IntegrationTestReport\nreport = IntegrationTestReport(test_name='validation')\nprint('✓ Integration test classes imported successfully')\nprint(f'✓ Report created: {report.test_name}')\n\")",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom tests.integration.test_full_commportal_pipeline import IntegrationTestReport, TestFullCommPortalPipeline\nreport = IntegrationTestReport(test_name='validation_test')\nprint('✓ Integration test classes imported successfully')\nprint(f'✓ Report created: {report.test_name}')\nprint(f'✓ Test class available: {TestFullCommPortalPipeline.__name__}')\n\")",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom tests.integration.test_full_commportal_pipeline import IntegrationTestReport, TestFullCommPortalPipeline\nreport = IntegrationTestReport(test_name='validation_test')\nprint('✓ Integration test classes imported successfully')\nprint(f'✓ Report created: {report.test_name}')\nprint(f'✓ Test class available: {TestFullCommPortalPipeline.__name__}')\ntest_dict = report.to_dict()\nprint(f'✓ Report serialization works: {len(test_dict)} keys')\n\")",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom tests.integration.test_full_commportal_pipeline import IntegrationTestReport, TestFullCommPortalPipeline\nreport = IntegrationTestReport(test_name='validation_test')\nprint('✓ Integration test classes imported successfully')\nprint(f'✓ Report created: {report.test_name}')\nprint(f'✓ Test class available: {TestFullCommPortalPipeline.__name__}')\ntest_dict = report.to_dict()\nprint(f'✓ Report serialization works: {len(test_dict)} keys')\nprint('✓ All integration test components working correctly')\n\")",
      "mcp__zen__get_version",
      "mcp__zen__chat",
      "mcp__zen__thinkdeep",
      "mcp__zen__analyze",
      "mcp__zen__debug",
      "mcp__zen__codereview",
      "WebFetch(domain:cdn.statically.io)",
      "WebFetch(domain:cdn.statically.io)",
      "WebFetch(domain:portal.grid4voice.ucaas.tech)",
      "Bash(./build.sh:*)",
      "Bash(./deploy-production.sh)",
      "Bash(for file in grid4-custom-v3.css grid4-netsapiens.css grid4-netsapiens-v2.1.1.css grid4-skin-v2-experimental.css grid4-skin-v2-experimental-fixed.css grid4-skin-v2-hybrid.css grid4-theme-system-v2.css)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then mv \"$file\" archive/old-css/)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(OLD_JS_FILES=\"grid4-loader.js grid4-version-selector.js grid4-theme-switcher-v2.js grid4-netsapiens-v2.js grid4-netsapiens-v2.1.1.js grid4-portal-skin-v3.js grid4-skin-v2-hybrid.js grid4-custom-v3.js grid4-netsapiens-v1.3.1-backup.js grid4-reference-compliant.js grid4-enhanced-basicjs.js grid4-loader-minimal.js grid4-nuclear-loader.js\")",
      "Bash(for file in $OLD_JS_FILES)",
      "Bash(then mv \"$file\" archive/old-js/)",
      "Bash(EXPERIMENTAL_JS=\"application-shell-v2.js consistency-engine.js consistency-engine-v2.js modern-ui-experiments.js shadow-dom-components.js service-worker-experimental.js feature-flags-ui.js feature-showcase.js showcase-features.js\")",
      "Bash(for file in $EXPERIMENTAL_JS)",
      "Bash(DEBUG_JS=\"debug-cache-buster.js debug-portal.js debug-why-not-working.js discovery-snippet.js analyze-har.js analyze-portal-structure.js check-injection.js check-login.js performance-fix.js remove-layers.js\")",
      "Bash(for file in $DEBUG_JS)",
      "WebFetch(domain:ibb.co)",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__read_file",
      "mcp__filesystem__search_files",
      "mcp__filesystem__read_multiple_files",
      "mcp__sequentialthinking__sequentialthinking",
      "mcp__filesystem__write_file",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__list_allowed_directories",
      "Bash(-e 's/   6\\. DOMAIN/   7\\. DOMAIN/g' )",
      "Bash(-e 's/   7\\. TABLE HEADER FIXES/   8\\. TABLE HEADER FIXES/g' )",
      "Bash(-e 's/   8\\. COLOR-PRIMARY BUTTON FIX/   9\\. COLOR-PRIMARY BUTTON FIX/g' )",
      "Bash(-e 's/   9\\. MODERN ENHANCEMENTS/   10\\. MODERN ENHANCEMENTS/g' )",
      "Bash(-e 's/   8\\. RESPONSIVE DESIGN/   10\\. RESPONSIVE DESIGN/g' )",
      "Bash(-e 's/   9\\. ENHANCED UI ELEMENTS/   11\\. ENHANCED UI ELEMENTS/g' )",
      "Bash(-e 's/   10\\. FORM ACTIONS FIX/   12\\. FORM ACTIONS FIX/g' )",
      "Bash(-e 's/   11\\. ADDITIONAL BUTTON FIXES/   13\\. ADDITIONAL BUTTON FIXES/g' )",
      "Bash(-e 's/   12\\. THEME SWITCHING SMOOTH/   14\\. THEME SWITCHING SMOOTH/g' )",
      "Bash(-e 's/   13\\. GLASSMORPHISM/   15\\. GLASSMORPHISM/g' )",
      "Bash(-e 's/   14\\. CONTEXT-AWARE/   16\\. CONTEXT-AWARE/g' )",
      "Bash(-e 's/   15\\. ENHANCED ANIMATIONS/   17\\. ENHANCED ANIMATIONS/g' )",
      "Bash(/home/paul/dev/grid4-netsapiens-skin/grid4-portal-skin-v5.0.11.css)",
      "mcp__filesystem__edit_file",
      "WebFetch(domain:til.simonwillison.net)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_navigate_forward",
      "mcp__playwright__browser_wait_for",
      "mcp__fetch__fetch",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_network_requests",
      "Bash(diff:*)",
      "Bash(wget:*)"
    ]
  },
  "enableAllProjectMcpServers": true
}